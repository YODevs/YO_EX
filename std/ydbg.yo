#[app::classname("dbg")]

include 'ystdio'
include 'yolib'

private static let timer : init system.diagnostics.stopwatch()

func print(list : yolib.list) : void
{
  let count : i32 = list::count()
  for(index in [0..count])
  {
    let item : str = list::get(index)
    io::println(item)
  }
}

func print(map : yolib.map) : void
{
  let size : i32 = map::size()
  for(index in [0..size])
  {
    let key, value: str
    map::get_map(index,key,value)
    io::println("Key -> #{key}#nlValue -> #{value}")
  }
}

func print(arr[] : str)
{
    let len : i32 = arr::length
    for(index in [0..len]){
        let val : str = arr[index]
        io::println(val)
    }
}

func print(matrix : yolib.matrix) : void
{
  let result : str = matrix::get_matrix()
  io::println(result)
}

func is_i32(val:str) : bool
{
  let i : i32
  let result : bool = val::contains(" ")
  if(result == true)
  {
    return false
  }
  else
  {
    result := system.int32::tryparse(val,i)
    return result
  }
}

func is_i32(val:obj) : bool
{
  let valtostr : str = [str]val
  let result : bool = is_i32(valtostr)
  return result
}

func is_bool(val:str) : bool
{
  val := val::tolower()
  match(val)
  {
    case "true"
    {
      return true
    }
    case "false"
    {
      return true
    }
    default
    {
      return false
    }
  }
}

func is_bool(val:obj) : bool
{
  let valtostr : str = [str]val
  let result : bool = is_bool(valtostr)
  return result
}

func is_f32(val:str) : bool
{
  let result : bool = val::contains(" ")
  if(result == false)
  {
    result := val::contains(".")
    if(result == true)
    {
      let f : f32
      result := system.single::tryparse(val,f)
      return result
    }
    else
    {
      return false
    }
  }
  else
  {
    return false
  }
}

func is_f32(val:obj) : bool
{
  let valtostr : str = [str]val
  let result : bool = is_f32(valtostr)
  return result
}

func is_space(val:str) : bool
{
  let result : bool
  let length : i32 = val::length
  if(val::length >> 0)
  {
    for(index in [0..length])
    {
      result := system.char::iswhitespace(val,index)
      if(result == false)
      {
        return false
      }
    }
    return true
  }
  else
  {
    return false
  }
}

func is_space(val:obj) : bool
{
  let valtostr : str = [str]val
  let result : bool = is_space(valtostr)
  return result
}

func timerstart() : void
{
  timer::start()
}

func timerstop() : void
{
  timer::stop()
}
